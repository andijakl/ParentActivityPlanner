rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Can read own data, can create profile if not existing, can update own profile
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      // Allow create only if the document doesn't exist yet for this userId
      allow create: if request.auth != null && !exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    // Activities: Logged-in users can read/create.
    // Only creator can delete.
    // Creator can update all fields.
    // Any authenticated user can update the participants list (for joining/leaving).
    match /activities/{activityId} {
      allow read, create: if request.auth != null;
      allow delete: if request.auth != null && resource.data.creatorId == request.auth.uid;
      allow update: if request.auth != null && (
          // Allow creator to update everything
          resource.data.creatorId == request.auth.uid ||
          // Allow any authenticated user to ONLY update participants
          (request.resource.data.keys().hasOnly(['participants']) && request.resource.data.participants != resource.data.participants)
       );
    }

    // Friendships: Users can manage their own friend lists (read/create/delete in their own subcollection)
    match /users/{userId}/friends/{friendId} {
       allow read, create, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Invitations:
    // - Logged-in users can create invites.
    // - Only the inviter can delete their own invites.
    // - Any authenticated user can read an invite (needed for the /invite/[code] page before login/signup)
    match /invitations/{inviteCode} {
      allow read: if request.auth != null; // Allow logged-in users to read any invite (e.g., to check validity)
      // Allow create only if the user is creating their own invite (inviterId matches auth.uid)
      allow create: if request.auth != null && request.resource.data.inviterId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.inviterId == request.auth.uid;
    }
  }
}
