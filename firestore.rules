
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Authenticated users can read any profile. Only the owner can update their own profile.
    // Anyone authenticated can create a user profile (typically on sign-up).
    match /users/{userId} {
      allow read: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }

    // Friends subcollection: Can manage own friends list
    match /users/{userId}/friends/{friendId} {
       // Rule 1: Owner can read, write, delete entries in their own list.
       allow read, write, delete: if request.auth != null && request.auth.uid == userId;

       // Rule 2: Allow a user (request.auth.uid) to create a friend entry for THEMSELVES
       // (where friendId == request.auth.uid) in another user's (userId's) friend list.
       // This is specifically for the reciprocal friend connection when accepting an invite.
       allow create: if request.auth != null && request.auth.uid == friendId &&
                         request.resource.data.keys().hasAll(['uid', 'displayName']);
    }

    // Activities: Logged-in users can read/create. Only creator can update/delete.
    // Participants can be updated by any logged-in user (for joining/leaving).
    match /activities/{activityId} {
      allow read, create: if request.auth != null;
      // Allow update only if it's the creator OR if only the participants/participantUids field is changing
      allow update: if request.auth != null && (
                      resource.data.creatorId == request.auth.uid ||
                      (request.resource.data.diff(resource.data).affectedKeys().hasAny(['participants', 'participantUids']) &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants', 'participantUids']))
                    );
      // Allow delete only by the creator
      allow delete: if request.auth != null && resource.data.creatorId == request.auth.uid;
    }

    // Invitations: Logged-in users can read/create/delete their own invites.
    // Anyone logged in can read an invite (to accept it).
    match /invitations/{inviteCode} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.inviterId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.inviterId == request.auth.uid;
    }
  }
}
